"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const first1_000_1 = __importDefault(require("./blacklists/first1_000"));
exports.RULES = {
    MIN_LENGTH: 'MIN_LENGTH',
    MAX_LENGTH: 'MAX_LENGTH',
    BLACKLIST: 'BLACKLIST',
    DIGITS: 'DIGITS',
    LETTERS: 'LETTERS',
    UPPERCASE: 'UPPERCASE',
    LOWERCASE: 'LOWERCASE',
    SYMBOLS: 'SYMBOLS',
};
function hasDigits(password) {
    return /\d+/.test(password);
}
function hasLowercase(password) {
    return password.toUpperCase() !== password;
}
function hasUppercase(password) {
    return password.toLowerCase() !== password;
}
function hasSymbols(password) {
    return /[`~\!@#\$%\^\&\*\(\)\-_\=\+\[\{\}\]\\\|;:'",<.>\/\?€£¥₹]+/.test(password);
}
function hasLetters(password) {
    return /[a-zA-Z]+/.test(password);
}
function validate(password, options = {}) {
    const errors = [];
    const minLength = options.minLength || 8;
    const maxLength = options.maxLength || 100;
    const blacklist = options.blackList || first1_000_1.default;
    const letters = options.letters === undefined ? true : options.letters;
    const digits = options.digits;
    const uppercase = options.uppercase;
    const lowercase = options.lowercase;
    const symbols = options.symbols;
    if (minLength < 8)
        throw new RangeError('minLength must be bigger than 8');
    if (maxLength < 50)
        throw new RangeError('maxLength must be bigger than 50');
    if (password.length < minLength)
        errors.push(exports.RULES.MIN_LENGTH);
    if (password.length > maxLength)
        errors.push(exports.RULES.MAX_LENGTH);
    if (digits && !hasDigits(password))
        errors.push(exports.RULES.DIGITS);
    if (letters && !hasLetters(password))
        errors.push(exports.RULES.LETTERS);
    if (uppercase && !hasUppercase(password))
        errors.push(exports.RULES.UPPERCASE);
    if (lowercase && !hasLowercase(password))
        errors.push(exports.RULES.LOWERCASE);
    if (symbols && !hasSymbols(password))
        errors.push(exports.RULES.SYMBOLS);
    if (!errors.length && blacklist.includes(password))
        errors.push(exports.RULES.BLACKLIST);
    return {
        valid: !errors.length,
        errors
    };
}
exports.validate = validate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5RUFBc0Q7QUFnQnpDLFFBQUEsS0FBSyxHQUFHO0lBQ25CLFVBQVUsRUFBRSxZQUFZO0lBQ3hCLFVBQVUsRUFBRSxZQUFZO0lBQ3hCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLE9BQU8sRUFBRSxTQUFTO0lBQ2xCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLE9BQU8sRUFBRSxTQUFTO0NBQ25CLENBQUE7QUFFRCxTQUFTLFNBQVMsQ0FBQyxRQUFnQjtJQUNqQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDN0IsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLFFBQWdCO0lBQ3BDLE9BQU8sUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFJLFFBQVEsQ0FBQTtBQUMzQyxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsUUFBZ0I7SUFDcEMsT0FBTyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUksUUFBUSxDQUFBO0FBQzNDLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxRQUFnQjtJQUNsQyxPQUFPLDJEQUEyRCxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNuRixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsUUFBZ0I7SUFDbEMsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0FBQ25DLENBQUM7QUFFRCxTQUFnQixRQUFRLENBQUMsUUFBZ0IsRUFBRSxVQUEyQixFQUFFO0lBQ3RFLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQTtJQUNqQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQTtJQUN4QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQTtJQUMxQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLG9CQUFnQixDQUFDO0lBQ3hELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDdkUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM5QixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ3BDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDcEMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUVoQyxJQUFJLFNBQVMsR0FBRyxDQUFDO1FBQUUsTUFBTSxJQUFJLFVBQVUsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO0lBRTFFLElBQUksU0FBUyxHQUFHLEVBQUU7UUFBRSxNQUFNLElBQUksVUFBVSxDQUFDLGtDQUFrQyxDQUFDLENBQUE7SUFFNUUsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLFNBQVM7UUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUM5RCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsU0FBUztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzlELElBQUksTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQzdELElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2hFLElBQUksU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3RFLElBQUksU0FBUyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3RFLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ2hFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFLLENBQUMsU0FBUyxDQUFDLENBQUE7SUFHaEYsT0FBTztRQUNMLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1FBQ3JCLE1BQU07S0FDUCxDQUFBO0FBQ0gsQ0FBQztBQTdCRCw0QkE2QkMifQ==